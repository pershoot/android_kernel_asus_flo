#!/system/bin/sh

KERNEL_CONF="/system/etc/glitch-settings.conf";
KERNEL_LOGFILE="/data/local/tmp/glitch-kernel.log";

if [ -f $KERNEL_LOGFILE ]; then
  mv $KERNEL_LOGFILE $KERNEL_LOGFILE.2;
fi

echo $(date) >> $KERNEL_LOGFILE;

#Max CPU_FREQ
MAXF="`cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq`"
echo $MAXF > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq;
echo $MAXF > /sys/devices/system/cpu/cpu1/cpufreq/scaling_max_freq;
echo $MAXF > /sys/devices/system/cpu/cpu2/cpufreq/scaling_max_freq;
echo $MAXF > /sys/devices/system/cpu/cpu3/cpufreq/scaling_max_freq;
echo Max CPU Frequency: $MAXF >> $KERNEL_LOGFILE;

#Min CPU_FREQ
MINF="`cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq`"
echo $MINF > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq; 
echo $MINF > /sys/devices/system/cpu/cpu1/cpufreq/scaling_min_freq;
echo $MINF > /sys/devices/system/cpu/cpu2/cpufreq/scaling_min_freq;
echo $MINF > /sys/devices/system/cpu/cpu3/cpufreq/scaling_min_freq;
echo Min CPU Frequency: $MINF >> $KERNEL_LOGFILE;

#I/O scheduler
if [ "`grep IOSCHED=1 $KERNEL_CONF`" ]; then
echo "cfq" > /sys/block/mmcblk0/queue/scheduler;
echo io scheduler: cfq >> $KERNEL_LOGFILE;
elif [ "`grep IOSCHED=2 $KERNEL_CONF`" ]; then
echo "row" > /sys/block/mmcblk0/queue/scheduler;
echo io scheduler: row >> $KERNEL_LOGFILE;
elif [ "`grep IOSCHED=3 $KERNEL_CONF`" ]; then
echo "deadline" > /sys/block/mmcblk0/queue/scheduler;
echo io scheduler: deadline >> $KERNEL_LOGFILE;
elif [ "`grep IOSCHED=4 $KERNEL_CONF`" ]; then
echo "fiops" > /sys/block/mmcblk0/queue/scheduler;
echo io scheduler: fiops >> $KERNEL_LOGFILE;
elif [ "`grep IOSCHED=5 $KERNEL_CONF`" ]; then
echo "sio" > /sys/block/mmcblk0/queue/scheduler;
echo io scheduler: sio >> $KERNEL_LOGFILE;
elif [ "`grep IOSCHED=6 $KERNEL_CONF`" ]; then
echo "noop" > /sys/block/mmcblk0/queue/scheduler;
echo io scheduler: noop >> $KERNEL_LOGFILE;
fi

#Read-ahead
if [ "`grep READAHEAD=1 $KERNEL_CONF`" ]; then
echo 128 > /sys/block/mmcblk0/queue/read_ahead_kb;
echo Read-ahead: 128 >> $KERNEL_LOGFILE;
elif [ "`grep READAHEAD=2 $KERNEL_CONF`" ]; then
echo 256 > /sys/block/mmcblk0/queue/read_ahead_kb;
echo Read-ahead: 256 >> $KERNEL_LOGFILE;
elif [ "`grep READAHEAD=3 $KERNEL_CONF`" ]; then
echo 512 > /sys/block/mmcblk0/queue/read_ahead_kb;
echo Read-ahead: 512 >> $KERNEL_LOGFILE;
elif [ "`grep READAHEAD=4 $KERNEL_CONF`" ]; then
echo 1024 > /sys/block/mmcblk0/queue/read_ahead_kb;
echo Read-ahead: 1024 >> $KERNEL_LOGFILE;
elif [ "`grep READAHEAD=5 $KERNEL_CONF`" ]; then
echo 2048 > /sys/block/mmcblk0/queue/read_ahead_kb;
echo Read-ahead: 2048 >> $KERNEL_LOGFILE;
fi

#FAST CHARGE
if [ "`grep FAST_CHARGE=1 $KERNEL_CONF`" ]; then
  echo 1 > /sys/kernel/fast_charge/force_fast_charge;
  echo fast charge enabled >> $KERNEL_LOGFILE;
else
  echo 0 > /sys/kernel/fast_charge/force_fast_charge;
  echo fast charge disabled >> $KERNEL_LOGFILE;
fi

#Set HOTPLUGDRV
if [ "`grep HOTPLUGDRV=1 $KERNEL_CONF`" ]; then
  echo 1 > /sys/kernel/msm_mpdecision/conf/enabled;
  echo 0 > /sys/module/intelli_plug/parameters/intelli_plug_active;
  echo msm_mpdecision enabled >> $KERNEL_LOGFILE;
elif [ "`grep HOTPLUGDRV=2 $KERNEL_CONF`" ]; then
  echo 0 > /sys/kernel/msm_mpdecision/conf/enabled;
  echo 1 > /sys/module/intelli_plug/parameters/intelli_plug_active;
  echo intelli_plug enabled >> $KERNEL_LOGFILE;
else
  echo 0 > /sys/kernel/msm_mpdecision/conf/enabled;
  echo 0 > /sys/module/intelli_plug/parameters/intelli_plug_active;
  echo qualcomm_mpdecision enabled >> $KERNEL_LOGFILE;
fi

#Set SWEEP2WAKE
if [ "`grep SWEEP2WAKE=0 $KERNEL_CONF`" ]; then
  echo 0 > /sys/android_touch/sweep2wake;
  echo Sweep2wake disabled >> $KERNEL_LOGFILE;
elif [ "`grep SWEEP2WAKE=2 $KERNEL_CONF`" ]; then
  echo 2 > /sys/android_touch/sweep2wake;
  echo Sweep2sleep enabled >> $KERNEL_LOGFILE;
else
  echo 1 > /sys/android_touch/sweep2wake;
  echo Sweep2wake enabled >> $KERNEL_LOGFILE;
fi

#Set S2S_ORIENTATION
if [ "`grep S2S_ORIENTATION=1 $KERNEL_CONF`" ]; then
  echo 1 > /sys/android_touch/orientation;
  echo orientation portrait >> $KERNEL_LOGFILE;
elif [ "`grep S2S_ORIENTATION=2 $KERNEL_CONF`" ]; then
  echo 2 > /sys/android_touch/orientation;
  echo orientation landscape >> $KERNEL_LOGFILE;
else
  echo 0 > /sys/android_touch/orientation;
  echo orientation both >> $KERNEL_LOGFILE;
fi

#Set PWR_TOGGLE
if [ "`grep PWR_TOGGLE=1 $KERNEL_CONF`" ]; then
  echo 1 > /sys/android_touch/pwrkey_suspend;
  echo power_toggle enabled >> $KERNEL_LOGFILE;
else
  echo 0 > /sys/android_touch/pwrkey_suspend;
  echo power_toggle disabled >> $KERNEL_LOGFILE;
fi

#Set SHORTSWEEP
if [ "`grep SHORTSWEEP=1 $KERNEL_CONF`" ]; then
  echo 1 > /sys/android_touch/shortsweep;
  echo Shortsweep enabled >> $KERNEL_LOGFILE;
else
  echo 0 > /sys/android_touch/shortsweep;
  echo Shortsweep disabled >> $KERNEL_LOGFILE;
fi

#Set DOUBLETAP2WAKE
if [ "`grep DT2WAKE=1 $KERNEL_CONF`" ]; then
  echo 1 > /sys/android_touch/doubletap2wake;
  echo DoubleTap2Wake enabled >> $KERNEL_LOGFILE;
else
  echo 0 > /sys/android_touch/doubletap2wake;
  echo DoubleTap2Wake disabled >> $KERNEL_LOGFILE;
fi

#Set Magnetic on/off
if [ "`grep LID=0 $KERNEL_CONF`" ]; then
  echo 0 > /sys/module/lid/parameters/enable_lid;
  echo Magnetic on/off disabled >> $KERNEL_LOGFILE;
else
  echo 1 > /sys/module/lid/parameters/enable_lid;
  echo Magnetic on/off enabled >> $KERNEL_LOGFILE;
fi

#USB Host mode charging
if [ "`grep OTGCM=1 $KERNEL_CONF`" ]; then
  echo Y > /sys/module/msm_otg/parameters/usbhost_charge_mode;
  echo USB OTG+Charge mode enabled >> $KERNEL_LOGFILE;
fi

#Input boost
if [ "`grep INPUTBOOST=0 $KERNEL_CONF`" ]; then
  echo 0 > /sys/kernel/msm_mpdecision/conf/boost_enabled;
  echo Input-Boost disabled >> $KERNEL_LOGFILE;
else
  echo 1 > /sys/kernel/msm_mpdecision/conf/boost_enabled;
  echo Input-Boost enabled >> $KERNEL_LOGFILE;
fi

#Gentle Fair Sleepers
if [ "`grep GFSLEEPERS=0 $KERNEL_CONF`" ]; then
  echo 0 > /sys/kernel/sched/gentle_fair_sleepers;
  echo Gentle Fair Sleepers disabled >> $KERNEL_LOGFILE;
else
  echo 1 > /sys/kernel/sched/gentle_fair_sleepers;
  echo Gentle Fair Sleepers enabled >> $KERNEL_LOGFILE;
fi

#fstrim
fstrim -v /cache | tee -a $KERNEL_LOGFILE;
fstrim -v /data | tee -a $KERNEL_LOGFILE;

#thermal settings
if [ "`grep THERM=1 $KERNEL_CONF`" ]; then
  echo 80,82,90,100 > /sys/module/msm_thermal/parameters/limit_temp_degC;
  echo run cool >> $KERNEL_LOGFILE;
elif [ "`grep THERM=2 $KERNEL_CONF`" ]; then
  echo 85,90,97,105 > /sys/module/msm_thermal/parameters/limit_temp_degC;
  echo run hot >> $KERNEL_LOGFILE;
fi

#GPU Clock settings
if [ "`grep GPU_OC=1 $KERNEL_CONF`" ]; then
  echo 320000000 > /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/max_gpuclk;
  echo 320MHz GPU >> $KERNEL_LOGFILE;
elif [ "`grep GPU_OC=3 $KERNEL_CONF`" ]; then
  echo 450000000 > /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/max_gpuclk;
  echo 450MHz GPU >> $KERNEL_LOGFILE;
elif [ "`grep GPU_OC=4 $KERNEL_CONF`" ]; then
  echo 504000000 > /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/max_gpuclk;
  echo 504MHz GPU >> $KERNEL_LOGFILE;
elif [ "`grep GPU_OC=5 $KERNEL_CONF`" ]; then
  echo 545000000 > /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/max_gpuclk;
  echo 545MHz GPU >> $KERNEL_LOGFILE;
elif [ "`grep GPU_OC=6 $KERNEL_CONF`" ]; then
  echo 600000000 > /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/max_gpuclk;
  echo 600MHz GPU >> $KERNEL_LOGFILE;
elif [ "`grep GPU_OC=7 $KERNEL_CONF`" ]; then
  echo 627000000 > /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/max_gpuclk;
  echo 627MHz GPU >> $KERNEL_LOGFILE;
else
  echo 400000000 > /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/max_gpuclk;
  echo 400MHz GPU >> $KERNEL_LOGFILE;
fi

#GPU Governor settings
if [ "`grep GPU_GOV=2 $KERNEL_CONF`" ]; then
  echo interactive > /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/pwrscale/trustzone/governor;
  echo Interactive GPU Governor >> $KERNEL_LOGFILE;
elif [ "`grep GPU_GOV=3 $KERNEL_CONF`" ]; then
  echo performance > /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/pwrscale/trustzone/governor;
  echo Performance GPU Governor >> $KERNEL_LOGFILE;
else
  echo ondemand > /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/pwrscale/trustzone/governor;
  echo Ondemand GPU Governor >> $KERNEL_LOGFILE;
fi

#GPU uV settings
if [ "`grep GPU_UV=2 $KERNEL_CONF`" ]; then
  printf "920000\n1025000\n1125000\n" > /sys/devices/system/cpu/cpufreq/vdd_table/vdd_levels_GPU;
  echo -25mV GPU uV >> $KERNEL_LOGFILE;
elif [ "`grep GPU_UV=3 $KERNEL_CONF`" ]; then
  printf "895000\n1000000\n1100000\n" > /sys/devices/system/cpu/cpufreq/vdd_table/vdd_levels_GPU;
  echo -50mV GPU uV >> $KERNEL_LOGFILE;
elif [ "`grep GPU_UV=4 $KERNEL_CONF`" ]; then
  printf "870000\n975000\n1075000\n" > /sys/devices/system/cpu/cpufreq/vdd_table/vdd_levels_GPU;
  echo -75mV GPU uV >> $KERNEL_LOGFILE;
elif [ "`grep GPU_UV=5 $KERNEL_CONF`" ]; then
  printf "845000\n950000\n1050000\n" > /sys/devices/system/cpu/cpufreq/vdd_table/vdd_levels_GPU;
  echo -100mV GPU uV >> $KERNEL_LOGFILE;
elif [ "`grep GPU_UV=6 $KERNEL_CONF`" ]; then
  printf "820000\n925000\n1025000\n" > /sys/devices/system/cpu/cpufreq/vdd_table/vdd_levels_GPU;
  echo -125mV GPU uV >> $KERNEL_LOGFILE;
elif [ "`grep GPU_UV=7 $KERNEL_CONF`" ]; then
  printf "795000\n900000\n1000000\n" > /sys/devices/system/cpu/cpufreq/vdd_table/vdd_levels_GPU;
  echo -150mV GPU uV >> $KERNEL_LOGFILE;
else
  printf "945000\n1050000\n1150000\n" > /sys/devices/system/cpu/cpufreq/vdd_table/vdd_levels_GPU;
  echo Stock GPU voltage >> $KERNEL_LOGFILE;
fi

#max scroff
if [ "`grep SCROFF=1 $KERNEL_CONF`" ]; then
  echo 594000 > /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq;
  echo 594MHz max screen off >> $KERNEL_LOGFILE;
elif [ "`grep SCROFF=2 $KERNEL_CONF`" ]; then
  echo 702000 > /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq;
  echo 702MHz max screen off >> $KERNEL_LOGFILE;
elif [ "`grep SCROFF=3 $KERNEL_CONF`" ]; then
  echo 810000 > /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq;
  echo 810MHz max screen off >> $KERNEL_LOGFILE;
elif [ "`grep SCROFF=4 $KERNEL_CONF`" ]; then
  echo 1026000 > /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq;
  echo 1026MHz max screen off >> $KERNEL_LOGFILE;
elif [ "`grep SCROFF=5 $KERNEL_CONF`" ]; then
  echo 1242000 > /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max_freq;
  echo 1242MHz max screen off >> $KERNEL_LOGFILE;
else
  echo 0 > /sys/devices/system/cpu/cpu0/cpufreq/screen_off_max;
  echo max screen off freq disabled >> $KERNEL_LOGFILE;
fi

#Battery life extender
if [ "`grep BLE=2 $KERNEL_CONF`" ]; then
  echo 4200 > /sys/devices/i2c-0/0-006a/float_voltage;
  echo 4.2V charge voltage >> $KERNEL_LOGFILE;
elif [ "`grep BLE=3 $KERNEL_CONF`" ]; then
  echo 4100 > /sys/devices/i2c-0/0-006a/float_voltage;
  echo 4.1V charge voltage >> $KERNEL_LOGFILE;
elif [ "`grep BLE=4 $KERNEL_CONF`" ]; then
  echo 4000 > /sys/devices/i2c-0/0-006a/float_voltage;
  echo 4.0V charge voltage >> $KERNEL_LOGFILE;
else
  echo 4300 > /sys/devices/i2c-0/0-006a/float_voltage;
  echo Stock charge voltage >> $KERNEL_LOGFILE;
fi

#exFAT support
  insmod /system/lib/modules/exfat.ko;
  echo exFAT module loaded >> $KERNEL_LOGFILE;

#Backup settings to sdcard
 cp /system/etc/glitch-settings.conf /sdcard/glitch-settings.conf;
 echo "Settings backup created on sdcard root" >> $KERNEL_LOGFILE;

#Wait a bit before applying governor changes
sleep 30

#CPU governor
if [ "`grep CPU_GOV=2 $KERNEL_CONF`" ]; then
  echo "interactive" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor;
  echo CPU Governor: interactive >> $KERNEL_LOGFILE;
elif [ "`grep CPU_GOV=3 $KERNEL_CONF`" ]; then
  echo "intellidemand" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor;
  echo CPU Governor: intellidemand >> $KERNEL_LOGFILE;
elif [ "`grep CPU_GOV=4 $KERNEL_CONF`" ]; then
  echo "smartmax" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor;
  echo CPU Governor: smartmax >> $KERNEL_LOGFILE;
else
  echo CPU Governor: ondemand >> $KERNEL_LOGFILE;
fi

exit 0
